trigger: none

pr:
  branches:
    include:
    - main
    - production

stages:
- stage: GitHub_Issue_Verification
  displayName: GitHub Issue Verification
  condition: and(eq(variables['Build.Reason'], 'PullRequest'), notIn(variables['System.PullRequest.TargetBranch'], 'refs/heads/production', 'production'), notIn(variables['System.PullRequest.SourceBranch'], 'refs/heads/production', 'production'))
  jobs:
    - job: VerifyGitHubIssue
      displayName: Verify GitHub Issue Link included in all PRs
      pool: 
        vmImage: 'windows-latest'
      steps:
        - checkout: self
        - powershell: eng/enforce-issue.ps1 -PullRequestNumber $(System.PullRequest.PullRequestNumber) -RepositoryName $(Build.Repository.Name)
          displayName: Enforce GitHub issue link presence

- stage: build
  dependsOn: []
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: false
      enablePublishBuildArtifacts: true
      enablePublishTestResults: false
      enablePublishBuildAssets: false
      enablePublishUsingPipelines: false
      enableTelemetry: true
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables['System.TeamProject'], 'internal')}}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals 1es-windows-2019
          ${{ if eq(variables['System.TeamProject'], 'public')}}:
            name: NetCore-Public          
            demands: ImageOverride -equals 1es-windows-2019-open

        
        strategy:
          matrix:
            # Only build debug in non-official builds
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                debug_configuration:
                  _BuildConfig: Debug
                  _PublishType: none
                  _SignType: test
                  _DotNetPublishToBlobFeed : false
            release_configuration:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _PublishType: none
                _SignType: test
                _DotNetPublishToBlobFeed : false
             
        steps:
        - checkout: self
          clean: true

        - task: UseDotNet@2
          displayName: Install Correct .NET Version
          inputs:
            useGlobalJson: true

        - task: UseDotNet@2
          displayName: Install .NET Version 3.1
          inputs:
            version: 3.1.x

        - task: NuGetToolInstaller@0
          inputs:
            versionSpec: 6.1.x

        - task: NodeTool@0
          inputs:
            versionSpec: 12.x

        - task: NuGetCommand@2
          displayName: Restore Packages
          inputs:
            command: restore
            solution: "**/*.sln"
            feedstoUse: config

        - powershell: eng\set-version-parameters.ps1
          displayName: Calculate release version variables

        - powershell: |
            [xml]$manifest = Get-Content src\Telemetry\TelemetryApplication\ApplicationPackageRoot\ApplicationManifest.xml
            $manifest.SelectSingleNode("/*[local-name()='ApplicationManifest']/*[local-name()='Policies']").RemoveAll()
            $manifest.SelectSingleNode("/*[local-name()='ApplicationManifest']/*[local-name()='Principals']").RemoveAll()
            $manifest.Save("src\Telemetry\TelemetryApplication\ApplicationPackageRoot\ApplicationManifest.xml")
            git diff
          displayName: Remove Service Fabric RunAsPolicy from TelemetryApplication

        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            /p:Test=false
            /P:Sign=false
          name: Build
          displayName: Build / Publish
          condition: succeeded()
        
        - powershell: |
            $manifestArgs = @()
            Get-ChildItem .vault-config/*.yaml |% {
              $manifestArgs += @("-m", $_.FullName)
            }
            dotnet run --project src/SecretManager/Microsoft.DncEng.SecretManager -- validate-all -b src @manifestArgs
          displayName: Verify Secret Usages

        - template: /eng/test.yaml