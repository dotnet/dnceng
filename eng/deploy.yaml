parameters:
  Subscription: ''
  PublishProfile: ''
  DotNetStatusAppName: ''
  DeploymentEnvironment: ''
  DotNetStatusEndpoint: ''
  StatusVariableGroup: ''

  # --- Secret Variable group requirements ---
  # dotnet-build-bot-dotnet-eng-status-token
  # secret-manager-scenario-tests-client-secret

stages:
- stage: ValidateSecrets
  dependsOn:
  - build
  jobs:
  - job: ValidateSecrets
    pool: 
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2022
    steps:
    - task: UseDotNet@2
      displayName: Install Correct .NET Version
      inputs:
        useGlobalJson: true

    - task: AzureCLI@2
      inputs:
        azureSubscription: DotNet Eng Services Secret Manager
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Get-ChildItem .vault-config/*.yaml |% { dotnet run --project src/SecretManager/Microsoft.DncEng.SecretManager -- synchronize --verify-only $_}

- stage: approval
  pool: server
  dependsOn:
  - build
  - Validate
  - ValidateSecrets
  - publish_using_darc
  jobs:
  - deployment: approval
    displayName: deployment approval (conditional)
    environment: ${{ parameters.DeploymentEnvironment }}

- stage: predeploy
  displayName: Pre-Deployment
  pool: server
  dependsOn:
  - build
  - Validate
  - approval
  jobs:
  - job: notifyStartDeployment
    displayName: Notify deployment start
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: Notify dotnet-eng-status/start
      continueOnError: true
      inputs:
        serviceConnection: ${{ parameters.DotNetStatusEndpoint }}
        method: POST
        urlSuffix: /dnceng/$(Build.BuildNumber)/start

- stage: deploy
  displayName: Deploy
  pool:
    name: NetCore1ESPool-Internal-NoMSI
    demands: ImageOverride -equals 1es-windows-2019
  dependsOn:
  - predeploy
  - approval
  variables:
  - name: PublishProfile
    value: ${{ parameters.PublishProfile }}
  jobs:
  - job: deployTelemetry
    displayName: Deploy telemetry service fabric application
    pool:
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2019    
    dependsOn:
    steps:
    - download: current
      artifact: TelemetryApplication
    - download: current
      artifact: ReleaseUtilities
    - task: AzurePowerShell@5
      displayName: Deploy Service Fabric Application (Telemetry)
      inputs:
        azureSubscription: ${{ parameters.Subscription }}
        scriptType: inlineScript
        azurePowerShellVersion: LatestVersion
        inline: |
          $autoRollBack = $true
          if ($env:DisableAutoRollBack -eq 'true') {
            $autoRollBack = $false
          }
          if ($env:BUILD_SOURCEBRANCH -eq 'refs/heads/main') {
            $autoRollBack = $false
          }
          eng/deployment/deploy.ps1 -obj $env:BUILD_ARTIFACTSTAGINGDIRECTORY -appPackagePath $env:ApplicationPackage -publishProfile $env:PublishProfilePath -autoRollBack $autoRollBack -location westus2
      env:
        PublishProfilePath: $(Pipeline.Workspace)/TelemetryApplication/projectartifacts/PublishProfiles/$(PublishProfile).xml
        ApplicationPackage: $(Pipeline.Workspace)/TelemetryApplication/applicationpackage

  - job: deployStatus
    displayName: Deploy dotnet-status web app
    pool:
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2019
    dependsOn:
    steps:
    - download: current
      artifact: DotNetStatus
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: AzureRM
        azureSubscription: ${{ parameters.Subscription }}
        appType: webApp
        WebAppName: ${{ parameters.DotNetStatusAppName }}
        deployToSlotOrASE: true
        ResourceGroupName: monitoring
        SlotName: staging
        Package: $(Pipeline.Workspace)/DotNetStatus/DotNetStatus.zip
        enableCustomDeployment: true
        DeploymentType: zipDeploy
        RemoveAdditionalFilesFlag: true

  - job: deployRolloutScorer
    displayName: Deploy rollout scorer azure function
    pool:
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2019
    dependsOn:
    steps:
    - download: current
      artifact: RolloutScorer
    - task: AzureFunctionApp@1
      displayName: Deploy RolloutScorer
      inputs:
        azureSubscription: ${{ parameters.Subscription }}
        ${{ if ne(parameters.DeploymentEnvironment, 'Production') }}:
          appSettings: >
            -DeploymentEnvironment Staging
            -ScorecardsStorageAccountKeySecretName "rolloutscorecardsstaging-storage-key"
            -ScorecardsStorageAccountName "rolloutscorecardsstaging"
            -ScorecardsStorageAccountTableName "scorecardsstaging"
        ${{ if eq(parameters.DeploymentEnvironment, 'Production') }}:
          appSettings: >
            -DeploymentEnvironment Production
            -ScorecardsStorageAccountKeySecretName "rolloutscorecards-storage-key"
            -ScorecardsStorageAccountName "rolloutscorecards"
            -ScorecardsStorageAccountTableName "scorecards"
        package: $(Pipeline.Workspace)/RolloutScorer/RolloutScorer.zip
        appName: ${{ parameters.RolloutScorerAppName }}

- stage: postdeploy
  displayName: Post-Deployment
  pool:
    name: NetCore1ESPool-Internal-NoMSI
    demands: ImageOverride -equals 1es-windows-2019
  dependsOn:
  - deploy
  variables:
  - group: ${{ parameters.StatusVariableGroup }}
  - group: ${{ parameters.GrafanaVariableGroup }}
  - name: DeploymentEnvironment
    value: ${{ parameters.DeploymentEnvironment }}
  - name: GrafanaHost
    value: ${{ parameters.GrafanaHost }}
  - name: GrafanaKeyVault
    value: ${{ parameters.GrafanaKeyVault }}
  jobs:
  - job: notifyEndDeployment
    displayName: Notify deployment end
    condition: always()
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: Notify dotnet-eng-status/end
      continueOnError: true
      inputs:
        serviceConnection: ${{ parameters.DotNetStatusEndpoint }}
        method: POST
        urlSuffix: /dnceng/$(Build.BuildNumber)/end
  - job: updateMetrics
    displayName: Update Grafana Metrics
    dependsOn:
    steps:
    - task: UseDotNet@2
      displayName: Install Correct .NET Version
      inputs:
        useGlobalJson: true
    - script: dotnet publish $(Build.SourcesDirectory)\src\Monitoring\Sdk\Microsoft.DotNet.Monitoring.Sdk.csproj -f net6.0
    - script: dotnet build $(Build.SourcesDirectory)\src\Monitoring\Monitoring.ArcadeServices\Monitoring.ArcadeServices.proj -t:PublishGrafana -p:GrafanaAccessToken=$(grafana-admin-api-key) -p:GrafanaHost=$(GrafanaHost) -p:GrafanaKeyVaultName=$(GrafanaKeyVault) -p:GrafanaKeyVaultServicePrincipalId=$(engineering-services-app-id) -p:GrafanaKeyVaultServicePrincipalSecret=$(engineering-services-app-secret) -p:GrafanaEnvironment=$(DeploymentEnvironment) -p:ParametersFile=parameters.json -v:normal

- stage: validateDeployment
  displayName: Validate deployment
  pool:
    name: NetCore1ESPool-Internal
    demands: ImageOverride -equals 1es-windows-2019
  dependsOn:
  - deploy
  variables:
  # Secret-Manager-Scenario-Tests provides: 
  #   - secret-manager-scenario-tests-app-id
  #   - secret-manager-scenario-tests-app-secret
  - group: Secret-Manager-Scenario-Tests
  jobs:
  - job: scenario
    displayName: Scenario tests
    timeoutInMinutes: 90
    steps:
    - download: current
      artifact: PackageArtifacts
    - download: current
      artifact: Microsoft.DncEng.SecretManager.ScenarioTests

    - task: NuGetToolInstaller@1
      displayName: Use NuGet
      inputs:
        versionSpec: 5.3.x

    - task: UseDotNet@2
      displayName: Install Correct .NET Version
      inputs:
        useGlobalJson: true

    - task: VSTest@2
      displayName: Secret Manager Scenario Tests
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          Microsoft.DncEng.SecretManager.ScenarioTests.dll
        searchFolder: $(Pipeline.Workspace)/Microsoft.DncEng.SecretManager.ScenarioTests
      env:
        AZURE_TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
        AZURE_CLIENT_ID: $(secret-manager-scenario-tests-app-id)
        AZURE_CLIENT_SECRET: $(secret-manager-scenario-tests-app-secret)