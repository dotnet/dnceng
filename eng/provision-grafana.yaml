# Azure Managed Grafana Provisioning Template
# This template provisions Azure Managed Grafana workspaces as part of the deployment process

parameters:
- name: DeploymentEnvironment
  type: string

- name: ServiceConnectionName
  type: string

- name: GrafanaResourceGroup
  type: string

- name: GrafanaWorkspaceName
  type: string

- name: GrafanaLocation
  type: string

- name: GrafanaKeyVault
  type: string

- name: GrafanaVariableGroup
  type: string

- name: DotnetEngServicesGroupObjectId
  type: string

- name: SkipGrafanaProvisioning
  type: boolean
  default: false

jobs:
- job: ProvisionGrafana
  displayName: 'Provision Azure Managed Grafana'
  pool:
    name: NetCore1ESPool-Internal
    demands: ImageOverride -equals 1es-windows-2022
  
  variables:
  - group: ${{ parameters.GrafanaVariableGroup }}
  
  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  - task: AzureCLI@2
    displayName: 'Validate Bicep Template'
    inputs:
      azureSubscription: '${{ parameters.ServiceConnectionName }}'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        Write-Host "Validating Grafana Bicep template..."
        if (!(Test-Path "azure-managed-grafana.bicep")) {
          throw "Bicep template not found: azure-managed-grafana.bicep"
        }
        
        az bicep build --file azure-managed-grafana.bicep
        if ($LASTEXITCODE -ne 0) {
          throw "Bicep template validation failed"
        }
        Write-Host "SUCCESS: Bicep template validation successful"

  - task: AzureCLI@2
    displayName: 'Ensure Resource Group Exists'
    inputs:
      azureSubscription: '${{ parameters.ServiceConnectionName }}'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $rgName = "${{ parameters.GrafanaResourceGroup }}"
        $location = "${{ parameters.GrafanaLocation }}"
        
        Write-Host "Checking if resource group '$rgName' exists..."
        $rg = az group show --name $rgName --query "name" --output tsv 2>$null
        
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Creating resource group '$rgName' in '$location'..."
          az group create --name $rgName --location $location
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to create resource group '$rgName'"
          }
          Write-Host "SUCCESS: Resource group created successfully"
        } else {
          Write-Host "SUCCESS: Resource group already exists"
        }

  - task: AzureResourceManagerTemplateDeployment@3
    displayName: 'Deploy Grafana Workspace'
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: '${{ parameters.ServiceConnectionName }}'
      action: 'Create Or Update Resource Group'
      resourceGroupName: '${{ parameters.GrafanaResourceGroup }}'
      location: '${{ parameters.GrafanaLocation }}'
      templateLocation: 'Linked artifact'
      csmFile: 'azure-managed-grafana.bicep'
      overrideParameters: '-location "${{ parameters.GrafanaLocation }}" -grafanaWorkspaceName "${{ parameters.GrafanaWorkspaceName }}" -skuName "Standard" -dotnetEngServicesGroupObjectId "${{ parameters.DotnetEngServicesGroupObjectId }}" -createRoleAssignment false'
      deploymentMode: 'Incremental'
      deploymentName: 'grafana-${{ parameters.DeploymentEnvironment }}-$(Build.BuildNumber)'
      deploymentOutputs: 'grafanaOutputs'

  - task: AzureCLI@2
    displayName: 'Install Azure Managed Grafana Extension'
    inputs:
      azureSubscription: '${{ parameters.ServiceConnectionName }}'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        Write-Host "Installing Azure CLI Azure Managed Grafana extension..."
        az extension add --name amg
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Warning: Failed to install amg extension, will use alternative verification method"
        } else {
          Write-Host "SUCCESS: Azure Managed Grafana extension installed"
        }

  - task: AzureCLI@2
    displayName: 'Verify Grafana Deployment'
    inputs:
      azureSubscription: '${{ parameters.ServiceConnectionName }}'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $workspaceName = "${{ parameters.GrafanaWorkspaceName }}"
        $rgName = "${{ parameters.GrafanaResourceGroup }}"
        
        Write-Host "Verifying Grafana workspace deployment..."
        
        # Wait for deployment to complete
        $maxAttempts = 30
        $attempt = 0
        do {
          $attempt++
          Write-Host "Verification attempt $attempt of $maxAttempts..."
          
          $workspace = az grafana show --name $workspaceName --resource-group $rgName 2>$null | ConvertFrom-Json
          if ($workspace -and $workspace.properties.provisioningState -eq "Succeeded") {
            break
          }
          
          if ($attempt -lt $maxAttempts) {
            Write-Host "Workspace not ready yet, waiting 30 seconds..."
            Start-Sleep -Seconds 30
          }
        } while ($attempt -lt $maxAttempts)
        
        if (!$workspace) {
          throw "Failed to verify Grafana workspace deployment"
        }
        
        Write-Host "GRAFANA WORKSPACE DETAILS:"
        Write-Host "   Name: $($workspace.name)"
        Write-Host "   URL: $($workspace.properties.endpoint)"
        Write-Host "   Location: $($workspace.location)"
        Write-Host "   SKU: $($workspace.sku.name)"
        Write-Host "   Status: $($workspace.properties.provisioningState)"
        Write-Host "   Identity: $($workspace.identity.principalId)"
        
        # Verify role assignments
        Write-Host "Checking role assignments..."
        $roleAssignments = az role assignment list --scope $workspace.id --query '[].{principalId:principalId, roleDefinitionName:roleDefinitionName}' 2>$null | ConvertFrom-Json
        if ($roleAssignments) {
          $roleAssignments | ForEach-Object { 
            Write-Host "   Role: $($_.roleDefinitionName) - Principal: $($_.principalId)" 
          }
        } else {
          Write-Host "   No role assignments found"
        }
        
        # Store outputs for downstream usage
        Write-Host "##vso[task.setvariable variable=GrafanaUrl;isOutput=true]$($workspace.properties.endpoint)"
        Write-Host "##vso[task.setvariable variable=GrafanaPrincipalId;isOutput=true]$($workspace.identity.principalId)"
        Write-Host "##vso[task.setvariable variable=GrafanaResourceId;isOutput=true]$($workspace.id)"
        
        Write-Host "SUCCESS: ${{ parameters.DeploymentEnvironment }} Grafana deployment verification completed"

  - task: AzureCLI@2
    displayName: 'Assign Grafana Admin Role to .NET Eng Services'
    continueOnError: true
    inputs:
      azureSubscription: '${{ parameters.ServiceConnectionName }}'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $workspaceName = "${{ parameters.GrafanaWorkspaceName }}"
        $rgName = "${{ parameters.GrafanaResourceGroup }}"
        $groupObjectId = "${{ parameters.DotnetEngServicesGroupObjectId }}"
        
        Write-Host "Attempting to assign Grafana Admin role to .NET Eng Services group..."
        
        # Get the Grafana workspace resource ID
        $subscriptionId = az account show --query id --output tsv
        $resourceId = "/subscriptions/$subscriptionId/resourceGroups/$rgName/providers/Microsoft.Dashboard/grafana/$workspaceName"
        
        # Check if role assignment already exists
        $existingAssignment = az role assignment list --scope $resourceId --assignee $groupObjectId --role "Grafana Admin" --query "[0].id" --output tsv 2>$null
        
        if ($existingAssignment) {
          Write-Host "SUCCESS: .NET Eng Services group already has Grafana Admin role"
        } else {
          # Try to assign the role
          Write-Host "Assigning Grafana Admin role to .NET Eng Services group ($groupObjectId)..."
          az role assignment create --assignee $groupObjectId --role "Grafana Admin" --scope $resourceId 2>$null
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "SUCCESS: Grafana Admin role assigned to .NET Eng Services group"
          } else {
            Write-Host "WARNING: Failed to assign Grafana Admin role automatically"
            Write-Host "Manual assignment required:"
            Write-Host "  1. Go to Azure Portal > Resource Groups > $rgName > $workspaceName"
            Write-Host "  2. Access control (IAM) > Add role assignment"
            Write-Host "  3. Role: Grafana Admin"
            Write-Host "  4. Assign access to: Group"
            Write-Host "  5. Select: .NET Eng Services group"
          }
        }

  